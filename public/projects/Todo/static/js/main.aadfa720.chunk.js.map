{"version":3,"sources":["components/Todos/Todo.js","components/Todos/Todos.js","components/Infos/Infos.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","li_class","todo","done","push","editId","id","className","join","type","onClick","onToggleTodoDone","checked","readOnly","onDoubleClickCapture","onEditId","title","onRemoveTodo","defaultValue","onKeyDown","onChangeTodoTitle","Todos","todosJsx","todos","filter","display","map","uniqid","Infos","nbTodos","length","nbDone","reduce","count","itemLeft","href","onChangeDisplay","onClearComplete","App","useState","setTodos","setDisplay","setEditId","toggleAll","setToggleAll","event","keyCode","target","value","placeholder","autoFocus","newValue","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aadfa720.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todo = (props) => {\r\n\tconst li_class = [];\r\n\tif (props.todo.done) {\r\n\t\tli_class.push('completed');\r\n\t}\r\n\tif (props.editId === props.todo.id) {\r\n\t\tli_class.push('editing');\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li className={li_class.join(' ')}>\r\n\t\t\t<div className=\"view\">\r\n\t\t\t\t<input className=\"toggle\" type=\"checkbox\" onClick={() => props.onToggleTodoDone(props.todo.id)} checked={props.todo.done} readOnly />\r\n\t\t\t\t<label onDoubleClickCapture={() => props.onEditId(props.todo.id)}>{props.todo.title}</label>\r\n\t\t\t\t<button className=\"destroy\" onClick={() => props.onRemoveTodo(props.todo.id)}></button>\r\n\t\t\t</div>\r\n\t\t\t<input className=\"edit\" defaultValue={props.todo.title} onKeyDown={props.onChangeTodoTitle} />\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\nimport uniqid from 'uniqid';\r\n\r\nconst Todos = (props) => {\r\n\tconst listFiltered = props.todos.filter(\r\n\t\t(todo) => props.display === 'all' || (props.display === 'active' && todo.done === false) || (props.display === 'completed' && todo.done === true)\r\n\t);\r\n\tconst todosJsx = listFiltered.map((todo) => (\r\n\t\t<Todo\r\n\t\t\tdisplay={props.display}\r\n\t\t\teditId={props.editId}\r\n\t\t\tonEditId={props.onEditId}\r\n\t\t\tonToggleTodoDone={props.onToggleTodoDone}\r\n\t\t\tonRemoveTodo={props.onRemoveTodo}\r\n\t\t\tonChangeTodoTitle={props.onChangeTodoTitle}\r\n\t\t\ttodo={todo}\r\n\t\t\tkey={uniqid()}\r\n\t\t/>\r\n\t));\r\n\r\n\treturn <ul className=\"todo-list\">{todosJsx}</ul>;\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\n\r\nconst Infos = (props) => {\r\n\tconst nbTodos = props.todos.length;\r\n\tconst nbDone = props.todos.reduce((count, todo) => {\r\n\t\tif (todo.done) {\r\n\t\t\treturn count + 1;\r\n\t\t}\r\n\t\treturn count;\r\n\t}, 0);\r\n\tconst itemLeft = nbTodos - nbDone;\r\n\r\n\treturn (\r\n\t\t<footer className=\"footer\">\r\n\t\t\t<span className=\"todo-count\">\r\n\t\t\t\t<strong>{itemLeft}</strong> item{itemLeft > 1 ? 's' : ''} left\r\n\t\t\t</span>\r\n\r\n\t\t\t<ul className=\"filters\">\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a className={props.display === 'all' ? 'selected' : ''} href=\"#/\" onClick={() => props.onChangeDisplay('all')}>\r\n\t\t\t\t\t\tAll\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#/active\" className={props.display === 'active' ? 'selected' : ''} onClick={() => props.onChangeDisplay('active')}>\r\n\t\t\t\t\t\tActive\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#/completed\" className={props.display === 'completed' ? 'selected' : ''} onClick={() => props.onChangeDisplay('completed')}>\r\n\t\t\t\t\t\tCompleted\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<button className=\"clear-completed\" onClick={props.onClearComplete}>\r\n\t\t\t\tClear completed ({nbDone})\r\n\t\t\t</button>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default Infos;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport uniqid from 'uniqid';\nimport Todos from './components/Todos/Todos';\nimport Infos from './components/Infos/Infos'; \n\nconst App = () => {\n\t// --- states ---\n\n\tconst [todos, setTodos] = useState([]);\n\n\tconst [display, setDisplay] = useState('all');\n\n\tconst [editId, setEditId] = useState('');\n\n\tconst [toggleAll, setToggleAll] = useState(false);\n\n\t// --- Actions ---\n\n\tconst onClearComplete = () => {\n\t\tsetTodos(todos.filter((todo) => todo.done === false));\n\t};\n\n\tconst onAddInput = (event) => {\n\t\tif (event.keyCode === 13 && event.target.value !== '') {\n\t\t\tsetTodos([{ id: uniqid(), title: event.target.value, done: false }, ...todos]);\n\t\t\tevent.target.value = '';\n\t\t}\n\t};\n\n\tconst onToggleTodoDone = (id) => {\n\t\tsetTodos(\n\t\t\ttodos.map((todo) => {\n\t\t\t\tif (todo.id === id) todo.done = !todo.done;\n\t\t\t\treturn todo;\n\t\t\t})\n\t\t);\n\t};\n\n\tconst onRemoveTodo = (id) => {\n\t\tsetTodos(todos.filter((todo) => todo.id !== id));\n\t};\n\n\tconst onChangeTodoTitle = (event) => {\n\t\tif (event.keyCode === 13 && event.target.value !== '') {\n\t\t\tconst title = event.target.value;\n\t\t\tsetTodos(\n\t\t\t\ttodos.map((todo) => {\n\t\t\t\t\tif (todo.id === editId) todo.title = title;\n\t\t\t\t\treturn todo;\n\t\t\t\t})\n\t\t\t);\n\t\t\tsetEditId('');\n\t\t}\n\t};\n\n\tconst onToggleAll = () => {\n\t\tconst newValue = !toggleAll;\n\t\ttodos.map((todo) => {\n\t\t\ttodo.done = newValue;\n\t\t\treturn todo;\n\t\t});\n\t\tsetToggleAll(newValue);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<section className=\"todoapp\">\n\t\t\t\t<header className=\"header\">\n\t\t\t\t\t<h1>todos</h1>\n\t\t\t\t\t<input className=\"new-todo\" onKeyDown={onAddInput} placeholder=\"What needs to be done?\" autoFocus />\n\t\t\t\t</header>\n\n\t\t\t\t<section className=\"main\">\n\t\t\t\t\t<input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" checked={toggleAll} readOnly onClick={onToggleAll} />\n\t\t\t\t\t<label htmlFor=\"toggle-all\">Mark all as complete</label>\n\t\t\t\t\t<Todos\n\t\t\t\t\t\ttodos={todos}\n\t\t\t\t\t\tdisplay={display}\n\t\t\t\t\t\teditId={editId}\n\t\t\t\t\t\tonToggleTodoDone={onToggleTodoDone}\n\t\t\t\t\t\tonRemoveTodo={onRemoveTodo}\n\t\t\t\t\t\tonEditId={setEditId}\n\t\t\t\t\t\tonChangeTodoTitle={onChangeTodoTitle}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\n\t\t\t\t<Infos todos={todos} display={display} onChangeDisplay={setDisplay} onClearComplete={onClearComplete} />\n\t\t\t</section>\n\t\t\t<footer className=\"info\">\n\t\t\t\t<p>Double-click to edit a todo</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tTemplate by <a href=\"http://sindresorhus.com\">Sindre Sorhus</a>\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tCreated by <a href=\"http://todomvc.com\">you</a>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tPart of <a href=\"http://todomvc.com\">TodoMVC</a>\n\t\t\t\t</p>\n\t\t\t</footer>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}